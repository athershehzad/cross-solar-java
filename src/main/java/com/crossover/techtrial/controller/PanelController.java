package com.crossover.techtrial.controller;

import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.model.Panel;
import com.crossover.techtrial.repository.DailyElectricityRepository;
import com.crossover.techtrial.service.DailyElectricityService;
import com.crossover.techtrial.service.HourlyElectricityService;
import com.crossover.techtrial.service.PanelService;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.sun.net.httpserver.Authenticator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * Panel Controller for all Rest APIs related to Panel.
 *
 * @author Crossover
 */

@RestController
public class PanelController {

    private static final Logger LOG = LoggerFactory.getLogger(PanelController.class);

    @Autowired
    PanelService panelService;

    @Autowired
    HourlyElectricityService hourlyElectricityService;

    @Autowired
    DailyElectricityService dailyElectricityService;

    /**
     * Register a Panel to System and start receiving the electricity statistics.
     *
     * @param panel to register.
     * @return
     */
    @PostMapping(path = "/api/register")
    public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
        return new ResponseEntity<>(panelService.register(panel), HttpStatus.CREATED);
    }

    /**
     * Controller Method to save hourly Electricity to Database.
     *
     * @param panelSerial       Serial number of Panel.
     * @param hourlyElectricity generated electricity for this panel.
     * @return
     */

    @PostMapping(path = "/api/panels/{panel-serial}/hourly")
    public ResponseEntity<?> saveHourlyElectricity(
            @PathVariable(value = "panel-serial") String panelSerial,
            @RequestBody HourlyElectricity hourlyElectricity) {
        hourlyElectricity.setPanel(panelService.findBySerial(panelSerial));
        return new ResponseEntity<>(hourlyElectricityService.save(hourlyElectricity), HttpStatus.CREATED);
    }

    /**
     * Get Hourly Electricity from Previous dates.
     */

    @GetMapping(path = "/api/panels/{panel-serial}/hourly")
    public ResponseEntity<?> hourlyElectricity(
            @PathVariable(value = "panel-serial") String panelSerial,
            @PageableDefault(size = 5, value = 0) Pageable pageable) {
        Panel panel = panelService.findBySerial(panelSerial);
        if (panel == null) {
            return ResponseEntity.notFound().build();
        }
        Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
                panel.getId(), pageable);
        return ResponseEntity.ok(page);
    }

    /**
     * This end point is used by Front end charts component to plot the daily statistics of
     * electricity generated by this Panel from the day it registered to end of previous day.
     *
     * @param panelSerial is unique serial for this Panel.
     * @return
     */

    @GetMapping(path = "/api/panels/{panel-serial}/daily")
    public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
            @PathVariable(value = "panel-serial") String panelSerial) {

        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        List<DailyElectricity> dailyElectricityForPanel = new ArrayList<DailyElectricity>();
        DailyElectricity dailyElectricity = null;

        Panel panel = panelService.findBySerial(panelSerial);
        LOG.info("Panel Id: " + panel.getId());
        LocalDateTime panelRegDate = LocalDateTime.ofInstant(panel.getRegistrationDate(), ZoneOffset.UTC);
        String panelRegDateFormatted = panelRegDate.format(dateFormatter);
        LOG.info("Panel Registration Date: " + panelRegDateFormatted);

        LocalDateTime currentDateTime = LocalDateTime.now();
        String currentDateFormatted = currentDateTime.format(dateFormatter);
        LOG.info("Current Date: " + currentDateFormatted);

        if(panelRegDateFormatted.equals(currentDateFormatted)) {
            LOG.info("current date and Panel registration date is same");
        } else {

            // Getting result from DB
            List<Object[]> list = dailyElectricityService.getDailyElectricity(panel.getId(), panelRegDateFormatted);

            if (list != null && list.size() > 0) {

                for (int i = 0; i < list.size(); i++) {

                    Object[] result = list.get(i);

                    if (result[0] != null) {
                        dailyElectricity = new DailyElectricity();
                        dailyElectricity.setDate(LocalDate.parse(result[0].toString(), dateFormatter));
                        dailyElectricity.setMin(Long.parseLong(result[1].toString()));
                        dailyElectricity.setMax(Long.parseLong(result[2].toString()));
                        dailyElectricity.setSum(Long.parseLong(result[3].toString()));
                        dailyElectricity.setAverage(Double.parseDouble(result[4].toString()));
                        dailyElectricityForPanel.add(dailyElectricity);
                    }
                }
            }
        }

        return ResponseEntity.ok(dailyElectricityForPanel);
    }
}